일대일 동등 분할 (One-to-One Equivalence Partitioning)
* 분할 영역만큼 테스트 케이스 필요
** ex. 분할1:A<1, 분할2:A>999, 분할3:400으로 나누어지는 수
**     이와 같은 분할영역이 있을 경우 각 분할영역을 만족하는 테스트 케이스 필요 (여기서는 3개)

최소화 동등 분할 방식 
* 테스트 케이스 하나가 분할 영역 여러 개를 커버할 수 있음
** ex. 분할1:A<1, 분할2:A>999, 분할3:400으로 나누어지는 수
**     입력:4000 이면 분할영역 2와 3을 함께 만족시킬 수 있으므로 나머지 분할영역1을 만족시키는 테스트 케이스를 생성하면 됨

분류 트리 방법 (Classification Tree)
* 분류 트리를 이용한 테스트 케이스 설계 방법
* 분류 노드, 클래스 노드로 구성
* 동등 분할 테스팅이나 경계 값 분석 방법을 이용하여 분류 노드를 여러 클래스 노드로 분할을 반복
* 완성된 트리의 leaf 노드를 조합하여 테스트 케이스 구성

경계 값 분석 (Boundary Value Analysis)
* 오류는 도메인 에러와 계산 에러로 구분할 수 있다.
** 도메인 에러:입력이 잘못된 경로를 실행
*** 폐쇄 오류, 이동 경계 오류, 기울어진 경계 오류, 잉여 경계 오류, 누락 경계 오류
* 도메인 에러를 탐지하는데 효과적
* one-to-ont equivalence partitioning 과 비슷한데 경계값을 테스트 입력으로 사용
* 2-value BVA : 경계값과 경계 외부에 있는 경계와 가장 가까운 값 선정 (경계 내부와 경계값은 비슷하다)
* 3-value BVA : 경계깞과 경계 내부와 경계 외부에서 가장 가까운 값 선정

구문 테스팅 (Syntax Testing)
* 입력이 구문에 맞게 작성되었는지 테스트하는 방법

조합 테스팅 (Combination Testing)
* Each Choice Testing (like-minimize)
** 테스트 케이스의 수는 클래스가 가장 많은 것과 같다.
* Pairwise Testing
** 클래스 수가 많은 두 클래스 조합만큼 테스트 케이스가 생성된다. 
*** ex. Class1 2개, Class2 3개, Class3 4개인 경우 pairwise testcase 수는 12개.
** "IPO algorithm" for pairwise
** "PICT" for pairwise testing tool by Microsoft
* All Combinations Testing
** 가능한 모든 조합을 테스트
* Base Choice Testing
** 기반이 되는 조합을 미리 선정

상태 전이 테스팅 (State Transition Testing)
* stateA---event/action--->stateB (상태 전이 구성요소)
* 상태 테스팅 (state testing)
** 상태 전이도의 모든 상태를 최소한 한 번 방문하는 테스트 설계
* 단일 전이 테스팅 (single transitions testing, 0-switch testing)
** 유효한 전이들을 최소한 한 번 방문하는 테스트 설계
*** ex. A->B edge2개 B->C edge3개인 경우, 테스트 케이스 3개 필요
* All transitions testing
** 유효하지 않은 전이들도 최소한 한 번 방문하는 테스트 설계
* 다중 전이 테스팅 (multiple transitions testing, N-switch testing)
** 상태 전이도에 있는 N+1 개의 전이 시퀀스를 최소한 한 번 방문하는 테스트 설계
** Difference with 0-switch testing and 1-switch testing
*** ex. A->B edge2개 B->C edge3개인 경우, 1-switch 테스트 케이스 6개 필요

결정표 테스팅 (Decision Table Testing)
* 입력 조건의 다양한 논리적 관계에 따른 행위가 결정될 때 이용

테스트 용이성 (Testability)
* 제어 용이성 (Controlability)
* 관찰 용이성 (Observability)
